from fasthtml.common import *
from agent_graph import graph
import uuid

app, rt = fast_app()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –ë–î)
sessions = {}

def get_session(session_id: str):
    if session_id not in sessions:
        sessions[session_id] = {"thread_id": str(uuid.uuid4())}
    return sessions[session_id]

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@rt('/')
def get():
    return Div(
        H1("ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —Å Human-in-the-Loop"),
        Div(
            P("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–∏–ø–∞: ", 
              Span("'–ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥'", style="font-weight: bold; color: red;"), 
              ", ", 
              Span("'–∫—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏'", style="font-weight: bold; color: red;"),
              " —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å HITL –≤ –¥–µ–π—Å—Ç–≤–∏–∏"),
            style="background: #f0f8ff; padding: 10px; border-radius: 5px; margin-bottom: 20px;"
        ),
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        Div(
            Div(
                Div("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.", 
                    style="color: green; margin: 5px 0;"),
                id="chat-messages"
            ),
            style="height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background: white; border-radius: 5px;"
        ),
        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        Form(
            Div(
                Input(
                    type="text", 
                    name="message", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 
                    required=True,
                    style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 4px;"
                ),
                Button("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                       type="submit",
                       style="margin-left: 10px; padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;"
                ),
                style="display: flex;"
            ),
            hx_post="/chat",
            hx_target="#chat-messages",
            hx_swap="beforeend",
            style="margin-top: 20px;"
        ),
        # –°–∫—Ä—ã—Ç–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        Div(
            Form(
                Div(
                    Span(id="pending-action", style="font-weight: bold; color: red;"),
                    style="margin-bottom: 10px;"
                ),
                Div(
                    Button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                           type="submit", 
                           name="feedback", 
                           value="approve",
                           style="padding: 8px 15px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;"
                    ),
                    Button("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                           type="submit", 
                           name="feedback", 
                           value="reject",
                           style="padding: 8px 15px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;"
                    ),
                ),
                hx_post="/human-feedback",
                hx_target="#chat-messages",
                hx_swap="beforeend",
                id="approval-form",
                style="display: none; background: #fff3cd; padding: 15px; border: 1px solid #ffeaa7; border-radius: 5px; margin-top: 10px;"
            ),
            id="approval-container"
        ),
        Script("""
            function scrollToBottom() {
                var container = document.getElementById('chat-messages').parentElement;
                container.scrollTop = container.scrollHeight;
            }
            
            // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTMX
            document.body.addEventListener('htmx:afterSwap', function() {
                setTimeout(scrollToBottom, 100);
            });
            
            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            function toggleApprovalForm(show, actionText) {
                var form = document.getElementById('approval-form');
                var actionSpan = document.getElementById('pending-action');
                if (show) {
                    actionSpan.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è: ' + actionText;
                    form.style.display = 'block';
                } else {
                    form.style.display = 'none';
                }
            }
        """),
        style="max-width: 800px; margin: 0 auto; padding: 20px; background: #f8f9fa; min-height: 100vh;"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤
@rt('/chat')
def post(request, message: str):
    session_id = request.cookies.get('session_id', str(uuid.uuid4()))
    session = get_session(session_id)
    
    config = {"configurable": {"thread_id": session['thread_id']}}
    user_message = {"role": "user", "content": message}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
    events = graph.invoke({"messages": [user_message]}, config)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_elements = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response_elements.append(
        Div(
            Div(f"üë§ –í—ã: {message}", style="text-align: right; color: blue; margin: 10px 0; background: #e3f2fd; padding: 8px 12px; border-radius: 15px 15px 0 15px;"),
            style="display: flex; justify-content: flex-end;"
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_messages = [e for e in events['messages'] if e['role'] == 'assistant']
    if assistant_messages:
        last_assistant_msg = assistant_messages[-1]['content']
        response_elements.append(
            Div(
                Div(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {last_assistant_msg}", style="text-align: left; color: green; margin: 10px 0; background: #f1f8e9; padding: 8px 12px; border-radius: 15px 15px 15px 0;"),
                style="display: flex; justify-content: flex-start;"
            )
        )
    
    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã
    if events.get('needs_human_approval') and events.get('pending_action'):
        response_elements.append(
            Script(f"""
                toggleApprovalForm(true, '{events['pending_action']}');
            """)
        )
    else:
        response_elements.append(
            Script("toggleApprovalForm(false, '');")
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è —Å–µ—Å—Å–∏–∏
    response = Div(*response_elements)
    if 'session_id' not in request.cookies:
        response.headers['Set-Cookie'] = f'session_id={session_id}; Path=/; HttpOnly'
    
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞
@rt('/human-feedback')
def post_human_feedback(request, feedback: str):
    session_id = request.cookies.get('session_id')
    if not session_id:
        return Div("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    session = get_session(session_id)
    config = {"configurable": {"thread_id": session['thread_id']}}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º feedback –≤ human_feedback
    human_feedback = "–¥–∞" if feedback == "approve" else "–Ω–µ—Ç"
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    events = graph.invoke({
        "human_feedback": human_feedback
    }, config)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_elements = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
    decision_text = "‚úÖ –ß–µ–ª–æ–≤–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ" if feedback == "approve" else "‚ùå –ß–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ"
    response_elements.append(
        Div(
            Div(f"üë®‚Äçüíº {decision_text}", style="text-align: center; color: orange; margin: 10px 0; background: #fff3cd; padding: 8px 12px; border-radius: 15px; border: 1px solid #ffeaa7;"),
            style="display: flex; justify-content: center;"
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_messages = [e for e in events['messages'] if e['role'] == 'assistant']
    if assistant_messages:
        last_assistant_msg = assistant_messages[-1]['content']
        response_elements.append(
            Div(
                Div(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {last_assistant_msg}", style="text-align: left; color: green; margin: 10px 0; background: #f1f8e9; padding: 8px 12px; border-radius: 15px 15px 15px 0;"),
                style="display: flex; justify-content: flex-start;"
            )
        )
    
    # –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    response_elements.append(
        Script("toggleApprovalForm(false, '');")
    )
    
    return Div(*response_elements)

if __name__ == "__main__":
    serve(port=5001)
